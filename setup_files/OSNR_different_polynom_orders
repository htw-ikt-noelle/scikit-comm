import sys
import os
if not any(os.path.abspath('.') == p for p in sys.path): 
    print('adding comm module to path...')
    sys.path.insert(0, os.path.abspath('.'))
import numpy as np
import matplotlib.pyplot as plt
import comm as comm

rbw = 0.1
central_wl = 1552.525 
offset = 0.3
interpol_bw = 0.3
signal_bw = 0.3
a1 = central_wl - offset - interpol_bw/2
a2 = central_wl - offset + interpol_bw/2
b1 = central_wl + offset - interpol_bw/2
b2 = central_wl + offset + interpol_bw/2
c1 = central_wl - signal_bw / 2
c2 = central_wl + signal_bw / 2


print('Interpol left low    : {0}'.format(a1))
print('Interpol left upper  : {0}'.format(a2))
print('Interpol right low   : {0}'.format(b1))
print('Interpol right upper : {0}'.format(b2))
print('Integration left     : {0}'.format(c1))
print('Integration right    : {0}'.format(c2))


# Get trace from csv file
#data = comm.utils.read_saved_file(r'C:\Users\Marcel\Desktop\OSNR_Spektren\Flaches_Spektrum\OSNR (10).csv')
#data = comm.utils.read_saved_file(r'C:\Users\Marcel\Desktop\OSNR_Spektren\Gauss_Spektrum\OSNR_gauss (10).csv')
#data = comm.utils.read_saved_file(r'C:\Users\Marcel\Desktop\OSNR_Spektren\Gauss_Spektrum large\OSNR (10).csv')
data = comm.utils.read_saved_file(r'C:\Users\Marcel\Desktop\OSNR_Spektren\Gauss_Spektrum narrow\OSNR (10).csv')

wavelength = np.array([])
power = np.array([])
for row in data[8:2056]:
    if row[1] == '-Infinity':
        power = np.append(power,np.float32(power[-1]))
    else:
        power = np.append(power,np.float32(row[1]))

    wavelength = np.append(wavelength,np.float32(row[0]))

pol_orders = np.array([2,3,4])


OSNR_measure = np.array([])
OSNR_measure_01nm = np.array([])



for pol_order in pol_orders:
    # calculate OSNR
    OSNR_list = comm.osnr.osnr(power_vector = power,
                        wavelength_vector = wavelength,
                        interpolation_points = np.array([a1,a2,b1,b2]),
                        integration_area = np.array([c1,c2]),
                        resolution_bandwidth = rbw,
                        polynom_order=pol_order,
                        plotting = True)

    OSNR_measure = np.append(OSNR_measure,OSNR_list[0])
    OSNR_measure_01nm = np.append(OSNR_measure_01nm,OSNR_list[1])

    names = ['OSNR:','OSNR_1nm:','Signal power:','Noise power:']
    units = ['dB','dB','dBm','dBm']
    plt.title('OSNR_0.1nm = 10dB \n Polynom order : {0}'.format(pol_order))
    #plt.ylim([-30, 3])
    
    print('\n\nPolynom order: {0}'.format(pol_order))

    for name,element,unit in zip(names,OSNR_list,units):
        print(str(name) + ' '+ str(element) + ' ' + unit)

plt.show()