This is an incomplete collection of (hopefully) helpful tipps for generating Cython functions:

Setup
* install C compiler (gcc on Linux / Mac or Microsoft Visual Studio on Windows): I used MS Visual Studio 2022
* install Cython (pip install cython): I used version 0.29.33
* install setuptools (pip install setuptools): I used version 58.1.0

Coding / Compiling
* Copy native Python code (function) into a corresponding *pyx file (ideally under comm/cython/XXX_cython.pdx, where XXX is the corresponding comm module)
* compile *pyx file by generating corresponding setup_XXX_cython.py file and running it by "python setup_XXX_cython.py build_ext --inplace"
	this compiles *.pyx file to *.c file and subsequently compiles *.c file to binary *.pyd (Windows) or *.so (Linux / Mac), which can directly be imported into Python
	 https://cython.readthedocs.io/en/latest/src/quickstart/build.html
* by using the cythonize option (-a or annotate=True, see setup_XXX_cython.py) a html file XXX_cython.html is additionally generated which indicates still used Python interactions (marked in yellow) which need to be minimized in order to spped up 
* possible syntax: pure python style or cdef style (I used cdef style since Cython version 0.29.33 appears to handle this one better)
	https://cython.readthedocs.io/en/latest/src/tutorial/cython_tutorial.html

Optimizing for speed
* static typing of variables, 
* using memoryviews (C "views" to Numpy arrays) instead of operating on actual Numpy / Python objects
	helpful link for Numpy arrays: https://cython.readthedocs.io/en/latest/src/userguide/numpy_tutorial.html
	# cdef double complex [:]
	# cdef double complex [:,:]
	# ...
* available Cython types 
	https://github.com/kwmsmith/scipy-2017-cython-tutorial/blob/master/03-cython-types.ipynb
	# cdef int
	# cdef bint
	# cdef double
	# cdef double complex
	# cdef str
	# cdef bytes
	# cdef list
	# cdef dict
	
Pitfalls
	* "for in range" loops using a step (range(a,b,step)) --> either use old syntax (for n from 0 <= n < N by step:) or use while loop instead
		see  https://github.com/cython/cython/issues/1106
	* divisions or modulo operations --> annotate your function using @cython.cdivision(True)
	* complex operations: watch out carefully which ones are optimized in Cython and which ones are not (by looking at XXX_cython.html file)
	* use C types for loop variables and indices to arrays, otherwise Cython jumps back and forth between C and Python
 